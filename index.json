[{"authors":["admin"],"categories":null,"content":"I am a co-founder of VD company, before that I was an Algorithm Engineer working for PD, with a focus on algorithms for 3D Printing applications.\nMy primary research area is computer graphics, with particular interests in geometric modeling, mesh processing. In my spare time,I would like to learn Shanghai Sign Language and communciate with deaf people.\nMy goal recently is creating a 3D nesting algorithm that is better than Magics and Netfabb.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://complexwang.github,io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a co-founder of VD company, before that I was an Algorithm Engineer working for PD, with a focus on algorithms for 3D Printing applications.\nMy primary research area is computer graphics, with particular interests in geometric modeling, mesh processing. In my spare time,I would like to learn Shanghai Sign Language and communciate with deaf people.\nMy goal recently is creating a 3D nesting algorithm that is better than Magics and Netfabb.","tags":null,"title":"Lawliet Wang","type":"authors"},{"authors":null,"categories":null,"content":"","date":1652140800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652140800,"objectID":"f99ca11328601cbce59124e536b0c8a9","permalink":"https://complexwang.github,io/project/shrinkwrap/","publishdate":"2022-05-10T00:00:00Z","relpermalink":"/project/shrinkwrap/","section":"project","summary":"The principle is that a new surface is wrapped around the existing geometry so it takes over its shape and then the original geometry is removed.","tags":["Mesh Repair"],"title":"Fast and Robust ShrinkWrap Algorithm","type":"project"},{"authors":null,"categories":null,"content":"","date":1650844800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650844800,"objectID":"7064fda08797b7ede1ad697a04a07954","permalink":"https://complexwang.github,io/project/removesharp/","publishdate":"2022-04-25T00:00:00Z","relpermalink":"/project/removesharp/","section":"project","summary":"When the part has long thin triangles, this filter will remove them.","tags":["Mesh Optimization"],"title":"Remove sharp triangles of triangle mesh","type":"project"},{"authors":null,"categories":null,"content":"莫言说他43天写完生死疲劳，刚开始觉得不可思议。毕竟这么厉害的一本书，只用一个半月？后来我想通了，写作有时候和写算法一样，都是短时间内的灵感快速爆发，一气呵成。当然这并不意味着写作和写算法都很容易。 就像莫言说的，“虽然我只用了43天写完了这本书，但是我却积累了43年 ”。 \n我写的很多算法都是在晚上洗澡的时候想通的。可是我家人一直嫌弃我洗澡时间长。但是我也没有浪费水，因为我把脚放在盆里，洗完澡，就把洗澡水留着，冲马桶用。 \n想起昨天的家人的一段对话：我正在房间对着电脑办公.\u0026ldquo;王松又在搞工作吗？\u0026ldquo;我妈说“他哪是在搞工作，是工作在搞他，他哪搞的定工作”。 \n计算机图形学领域有很多著名的历史人物，他们都为计算机图形学作出重要的贡献，写出很厉害的算法，成为业界标准，然后被写进教科书。而他们之所以著名，是因为在他们发明这些算法之前，这些问题是超级难的问题，一直悬而未决，他们用这些算法扭转乾坤。现在，我们花费几节课把他们这些经典算法学会。 这就说明一个问题，这些超级难的问题的解决方案并没有太难（我们几节课学会），并没有特别高深的数学公式之类。所以我在想如何解决新问题的时候，一直都先问自己，这个问题是不是就有一个 简单直接 直插心脏的算法？ \n一个算法问题在没找到解决方案之前，无时无刻不在挂念着，想着。可在找到解决方案那一刻，就会瞬间对他失去兴趣，看都不想看，觉得无聊。\u0026mdash;一个渣男算法工程师的内心独白。 \n学而不思则罔，思而不学则殆。之前只知道表意，最近和各种人接触，深有体会。和一些硕士博士聊天，发现他们每天都累的不轻，争分夺秒学习各种课程。但是却从来没有停下来好好反思反思并且把已学的东西实践一下。这样当然就会迷惑，最终导致没有真正理解。这就是学而不思则罔；和一些企业的朋友聊天，他们无时无刻不在思考如何解决各种算法问题，但是从来没想过多搜多看多学。最后也解决不了问题，还累的不轻。这就是思而不学则殆。 \n","date":1646524800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646524800,"objectID":"1a512688b8ab88b0266bd3cc840789d4","permalink":"https://complexwang.github,io/project/thoughts/","publishdate":"2022-03-06T00:00:00Z","relpermalink":"/project/thoughts/","section":"project","summary":"Some thoughts on work and study","tags":["Others"],"title":"Some thoughts","type":"project"},{"authors":null,"categories":null,"content":"","date":1646006400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646006400,"objectID":"9511626e358f8fc62068c7b3331018e6","permalink":"https://complexwang.github,io/project/25nesting/","publishdate":"2022-02-28T00:00:00Z","relpermalink":"/project/25nesting/","section":"project","summary":"Intelligent 2.5D nesting algorithm for irregular 3d models.","tags":["Nesting"],"title":"Intelligent 2.5D nesting algorithm","type":"project"},{"authors":null,"categories":null,"content":"","date":1631750400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631750400,"objectID":"34990bb2fb04e2f41142f1e947c0fdee","permalink":"https://complexwang.github,io/project/selfsupport/","publishdate":"2021-09-16T00:00:00Z","relpermalink":"/project/selfsupport/","section":"project","summary":"Propose a support-free hollowing framework to overcome the difficulty of fabricating voids inside a solid.","tags":["Mesh Offset"],"title":"Support-Free Hollowing","type":"project"},{"authors":[],"categories":null,"content":"","date":1630699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1630699200,"objectID":"12003adeb02d79098e54faca2a6b0f3b","permalink":"https://complexwang.github,io/talk/cadcg2/","publishdate":"2021-09-02T00:00:00Z","relpermalink":"/talk/cadcg2/","section":"talk","summary":"The application of computer graphics in 3D printing and its career planning.","tags":[],"title":"What can computer graphics do？Season 2","type":"talk"},{"authors":[],"categories":null,"content":"","date":1620738000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1620738000,"objectID":"d01cdaef6089203932e80cd7da2bf67a","permalink":"https://complexwang.github,io/talk/cadcg-into-company/","publishdate":"2021-05-11T00:00:00Z","relpermalink":"/talk/cadcg-into-company/","section":"talk","summary":"Development and application of graphics for additive manufacturing","tags":[],"title":"CCF CAD\u0026CG into the Enterprise","type":"talk"},{"authors":[],"categories":null,"content":"","date":1615834800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615834800,"objectID":"769b99253247cd5ef9ad67e5b78e6b32","permalink":"https://complexwang.github,io/talk/cadcg/","publishdate":"2021-03-15T00:00:00Z","relpermalink":"/talk/cadcg/","section":"talk","summary":"The application of computer graphics in 3D printing and its career planning.","tags":[],"title":"What can computer graphics do？","type":"talk"},{"authors":null,"categories":null,"content":"","date":1611964800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1611964800,"objectID":"44f55ab6dfbd9c23dedc5e0745bc0bb0","permalink":"https://complexwang.github,io/project/orientationfix/","publishdate":"2021-01-30T00:00:00Z","relpermalink":"/project/orientationfix/","section":"project","summary":"Normal error is a common error in triangular mesh, so it is very important to repair it.","tags":["Mesh Repair"],"title":"Fast Triangle Mesh Normal Fix Algorithm","type":"project"},{"authors":null,"categories":null,"content":"","date":1610668800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1610668800,"objectID":"defe23a56009d2e0755b8fa819a289c4","permalink":"https://complexwang.github,io/project/simplification/","publishdate":"2021-01-15T00:00:00Z","relpermalink":"/project/simplification/","section":"project","summary":"It can rapidly produce high quality approximations of polygonal models.","tags":["Mesh Optimization"],"title":"Fast and High-accuracy Triangle Mesh Simplification Algorithm","type":"project"},{"authors":null,"categories":null,"content":"Collection\n Ke-Sen Huang\u0026rsquo;s Home Page\nCSRankings: Computer Science Rankings\nComputer Graphics Research Software\n*FCPW: Fastest Closest Points in the West*](https://github.com/rohan-sawhney/fcpw/) -- *Probabilistic Quadrics*](https://github.com/Philip-Trettner/probabilistic-quadrics/) -- *Fast and Robust Mesh Arrangements*](https://github.com/gcherchi/FastAndRobustMeshArrangements/) -- *Fast Winding Numbers for Soups*](https://github.com/libigl/libigl/) -- *ImatiSTL*](https://github.com/qnzhou/ImatiSTL/) [*Meshfix*](https://github.com/MarcoAttene/MeshFix-V2.1/) -- *Indirect Predicates for Geometric Constructions*](https://github.com/MarcoAttene/Indirect_Predicates/)-- Courses\n Essence of Linear Algebra\nKeenan Crane Computer Graphics\nkeenan Crane Discrete Differential Geometry\nMaterials\n Matt Keeter // QEF Explainer\nI have a habit of looking up various algorithm codes, study materials and courses on the Internet every once in a while. But when I actually need to use them in my work, I often forget about their existence. As far as I\u0026rsquo;m concerned, one guideline for writing algorithms efficiently is to avoid rebuilding the wheel. First, rebuilding the wheel will cost you a lot of time, and second, the wheel you build is not necessarily as good as someone else\u0026rsquo;s open source.For these reasons, I will occasionally update some material in this page that I find interesting and useful.\n","date":1606608000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1606608000,"objectID":"43d2cc12ac889dc5535e04bcd7c6de5a","permalink":"https://complexwang.github,io/project/favouritelinks/","publishdate":"2020-11-29T00:00:00Z","relpermalink":"/project/favouritelinks/","section":"project","summary":"Not sure if this is research or just surfing the Internet.","tags":["Others"],"title":"My favourite links","type":"project"},{"authors":null,"categories":null,"content":"The two images above,one is surface to solid to one side,the other is to both side.\n","date":1603929600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1603929600,"objectID":"76ca6f44cc4c99006e94358ae9f2f845","permalink":"https://complexwang.github,io/project/thicken/","publishdate":"2020-10-29T00:00:00Z","relpermalink":"/project/thicken/","section":"project","summary":"By such a surface-to-solid conversion operation, industrial users are able to fabricate a surface by 3D printing.","tags":["Mesh Offset"],"title":"Efficient 3D Surface Thickening Algorithm","type":"project"},{"authors":null,"categories":null,"content":"Why 3D Nesting Matters\nAdditive manufacturing (AM), also known as 3D printing, refers to a set of technologies that allow the production of highly complex parts in an incremental layer-by-layer material deposition process. Powder-based Additive manufacturing (AM) machines, Selective Laser Sintering (SLS), and Multi Jet Fusion are able to print multiple parts in a build volume at the same time.\n3D Nesting (a.k.a “Packing”) is the process by which a collection of 3D files are sorted, oriented and arranged in 3D space to minimize their combined bounding box volume. Efficient nesting of multiple parts can significantly reduce unit cost and cycle time in additive manufacturing (AM).\nFor the above reason, we developed an advanced 3D nesting (3D packing) function in our software. Moreover, in the past two months, we have optimized this algorithm, which has greatly improved the nesting speed and density.\nHow It Works\nVD\u0026rsquo;s Nesting algorithm is built to minimize the z-height of the batch, allows user to set part interval, margin to platform sides, limited platform height, parts rotation and so on.\nPart interval: In order to avoid fusing your parts together in the printing process, part interval between all of the components in your 3D file is required to be considered. Small part interval increases the risk of your parts being fused together while large part interval leads to more space needed resulting in waste of material and time.\nVD allows users to set part interval freely. An experienced engineer can weigh and select the most suitable part interval.\nRotation setting: The orientation of each part in the 3D printing platform has a great influence on the final product surface quality. For example, rounded parts are frequently placed on the X and Y axes to avoid warpage.\nVD allows users to set Z-Rotation steps. It defines how many options you have when rotating the part along the z-axis. The more steps you have, the more options and the higher the density you will reach. VD also allows users to set whether to rotate parts around X-axis or Y-axis.\nThe test case and results\nWe nested 100 identical glasses models in a 3D printing platform with a size of 600mm600mm400mm. Each model has 125544 vertices and 251092 triangles. The maximal used platform height is 106.168mm. This experiment was run on a 3.00GHz Intel Core i7 PC with 16Gb RAM and it only took 8 seconds.\n","date":1599696000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599696000,"objectID":"9c6414b3aed1b7c01de66df47e840845","permalink":"https://complexwang.github,io/project/3dnesting/","publishdate":"2020-09-10T00:00:00Z","relpermalink":"/project/3dnesting/","section":"project","summary":"Efficient nesting of multiple parts can significantly reduce unit cost and cycle time in additive manufacturing (AM).","tags":["Nesting"],"title":"The Swiss Army Knife of 3D Nesting","type":"project"},{"authors":[],"categories":null,"content":"","date":1594216800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594216800,"objectID":"698c287119d7564ff84ae79cb7e4d322","permalink":"https://complexwang.github,io/talk/dentalprinting/","publishdate":"2020-07-08T14:00:00Z","relpermalink":"/talk/dentalprinting/","section":"talk","summary":"Introduce the data processing flow for metal dental printing.","tags":[],"title":"Data processing flow for metal dental printing","type":"talk"},{"authors":null,"categories":null,"content":"","date":1591747200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591747200,"objectID":"f1ced1893eb54429c7df44c929125119","permalink":"https://complexwang.github,io/project/shell/","publishdate":"2020-06-10T00:00:00Z","relpermalink":"/project/shell/","section":"project","summary":"Mark the surfaces on the part that you would like to remove; the remaining part will be hollowed out.","tags":["Mesh Offset"],"title":"Fast and Memory Efficient Shell Generation Algorithm","type":"project"},{"authors":[],"categories":null,"content":"","date":1589205600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589205600,"objectID":"b274a3535c834ba2a49b069c47885c6d","permalink":"https://complexwang.github,io/talk/sls/","publishdate":"2020-05-11T00:00:00Z","relpermalink":"/talk/sls/","section":"talk","summary":"Introduce the powerful functions of VD\u0026BP.","tags":[],"title":"Introduction to SLS 3D Printing Software","type":"talk"},{"authors":null,"categories":null,"content":"","date":1585699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585699200,"objectID":"06e18ccd626e2ba8416c4bed469a49fe","permalink":"https://complexwang.github,io/project/unify/","publishdate":"2020-04-01T00:00:00Z","relpermalink":"/project/unify/","section":"project","summary":"When applying the unify function to a part, only the outer triangles will be preserved and all the inner triangles will be thrown away.","tags":["Mesh Repair"],"title":"Fast and Robust Unify Algorithm","type":"project"},{"authors":null,"categories":null,"content":" This is a video I recorded of my automatic repairing algorithm.\nWhy model repairing matters\nFailed prints are a common issue when you finally come to print the 3D models you’ve created. One of the main reasons why printing failed is that many 3D models have defects that make them unsuitable for printing. But where do these defects come from?\nTo answer this question, we need to that know that the vast majority of today’s 3D models originate from one of two common data sources: from digitization of real-world objects or phenomena, or from tessellation of virtual, synthetic data typically produced in a computer [1].\nDigitized models: Digitizing a real-world 3D object amounts to capturing several views of the object which are eventually aligned and merged into a single model .While this is sufficient for mere visualization purposes, at this stage polygon meshes may contain degenerate elements, overlapping or self-intersecting parts, surface holes, and a number of other flaws.\nSynthetic models: If an engineer want to print a CAD model, tessellation algorithms need to be used for converting CAD files to triangle meshes. Unfortunately, tessellation algorithms typically create a separate mesh per patch and, though each such mesh might respect all the requirements, neighboring patches are often not continuously and consistently connected and, in some cases, they overlap or intersect.\nBesides, we need to mention that some models may visually look meaningful but have lots of defects inside them and it is very hard to find with eyes.\nAccording to the above reasons, we need to develop a model repair algorithm that can handle all these kinds of defects.\nHow it works\nBased on the above analysis, it is not hard to find that there are so many different kinds of defects. Adjusting STL files manually or fix all these defects one by one is a time-consuming process. Besides, users may not have the necessary skills to handle all these problems by themselves. So, we strongly believed that automatic methods are even more important. In view of this, we optimized our automatic repair workflow recently. In the remainder of this article, we will talk about the tests we have done and show the test results to the readers.\nThe test case and results\nThingi10k [2] is a new dataset of 10,000 models collected from an online 3D printing model-sharing database. This dataset represents a more concise summary of real-world models used for 3D printing compared to existing datasets. We downloaded 4447 not solid models which have all kinds of defects (e.g., self-intersections, holes, degeneracies, noisy shells, not orientable, non-manifoldness, etc.) through the online query interface. We tested our algorithm over these 4447 not solid models in Thingi10k dataset. The results showed that 99% of the 4447 not solid models can be successfully fixed by our automatic repair algorithm. The following figures shows some examples of the automatic repair algorithm.\nBeyond the Thingi10k dataset, we also obtained quite a large number of teeth models and CAD models for 3D printing from our customers. The following figures shows an example of the automatic repair algorithm tested on teeth.\nWe confess here that our automatic repair algorithm can not repair all kinds of models. For very large 3D models, automatic repair may fail because of your computer’s memory limitation. For 3D models with large holes, our automatic repair algorithm may cause distortion. More generally, model repair problem is ill-posed, sometimes the only right answer is only in the designer’s mind and we could not guess. We welcome you to apply to try our software through our website. If you find some 3D models that our software can’t fix, you could send them to us by email. All data will be kept confidential and won\u0026rsquo;t be commercial used. We will try our best to fix them and send to you back.\nAcknowledgments\nWe thank Thingi10K for sharing the 3D models. We are grateful to EPlus, SHINING 3D，HeyGears for sharing the teeth models, TPM3D and RayShape for other kinds of 3D models.\nReferences\n[1] Marco Attene, Marcel Campen, and Leif Kobbelt. 2013. Polygon Mesh Repairing: An Application Perspective. ACM Comput. Surv. 45, 2, Article 15 (March 2013)\n[2] Qingnan Zhou and Alec Jacobson. 2016. Thingi10K: A Dataset of 10,000 3D-Printing Models, https://ten-thousand-models.appspot.com. Technical Report. New York University.\n","date":1583798400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583798400,"objectID":"7545c9f03c70bdeb6d39ac7aa8f82441","permalink":"https://complexwang.github,io/project/autorepair/","publishdate":"2020-03-10T00:00:00Z","relpermalink":"/project/autorepair/","section":"project","summary":"Powerful and effective model repair algorithms. 99% of the 4447 not solid models in Thingi10k dataset can be successfully fixed.","tags":["Mesh Repair"],"title":"An In-Depth Look at Model Repairing","type":"project"},{"authors":null,"categories":null,"content":" This is a video I recorded of my 2D nesting algorithm.\nAdditive manufacturing (AM) is poised to bring about a revolution in the way products are designed, manufactured, and distributed to end users. Due to the layer-based processing characteristic, significant savings in cost and time can be achieved in AM by manufacturing multiple parts in a single setup to achieve efficient machine volume utilization. Intuitively, to improve the machine utilization, more parts should be placed as compactly as possible to harness the build volume so as to reduce the total build time and cost for per machine run. However, doing the part placement manually in a graphic environment is time-consuming, and it becomes more complicated when placing a batch of parts with a large quantity and very complex geometries. Furthermore, it is very difficult or even impossible for an operator to find an optimal part placement solution manually when placing a large number of parts models. For the above-mentioned reasons，we developed this 2D nesting function in VD software.\nFor 2D nesting, you can adjust:\n  Accuracy: the higher the accuracy, the higher is the packing density\n  Part interval: minimum distance between parts\n  Margin to sides: distance to platform border (XY)\n  Distance to platform: the minimum Z value of parts\n  Rotation setting: defines how many options you have when rotating the part along the z-axis. The more steps you have, the more options and the higher the density you will reach. Besides these useful settings, we have some more advanced functions.\n  Selection\nWhen you want to nest all the parts, just click All parts, all parts will be automatically nested for you.\nWhen you want to nest only selected parts, just click Selected parts.\n Whenever you want to place specific parts manually and let VD nest other parts around those, you can select these additional parts and click Keep unselected parts unmoved. With this option, the unselected parts won’t be moved anymore.  If you want to move unselected parts out of platform, just click Move unselected parts out of platform. All the parts unselected will be moved outside platform, only the selected be nested on the platform.    Align parts’ main direction to X-axis\nThis function is only useful for dental 3D printing. By clicking Align parts’ main direction to X-axis, all the main directions of teeth models will align to X-axis.\n  2D nesting for round platform\nVD has a special function that is nesting parts for round platform which can been hardly seen in other 3D printing software.\nUnder this are more result images by my 2D nesting algorithm.\n  ","date":1582934400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1582934400,"objectID":"270d89072e37bb4a1b2233f6bea49694","permalink":"https://complexwang.github,io/project/2dnesting/","publishdate":"2020-02-29T00:00:00Z","relpermalink":"/project/2dnesting/","section":"project","summary":"Intelligent 2D nesting algorithm for irregular 3d models. Highly praised by many customer companies.","tags":["Nesting"],"title":"Intelligent 2D nesting algorithm","type":"project"},{"authors":null,"categories":null,"content":"","date":1570233600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570233600,"objectID":"16f5dee558deeafa11ae17938aefce64","permalink":"https://complexwang.github,io/project/hole-filling/","publishdate":"2019-10-05T00:00:00Z","relpermalink":"/project/hole-filling/","section":"project","summary":"The model you want to be 3D Printed must be watertight, so it is very important to repair it.","tags":["Mesh Repair"],"title":"Fast and Robust Triangle Mesh Hole Filling Algorithm","type":"project"},{"authors":null,"categories":null,"content":"Clipping visualized 3D models with user-defined clipping planes is one of basic OpenGL features that allows the user to look inside the models.\nHowever, in some cases it is more interesting to investigate the cross-section shape rather than the model\u0026rsquo;s internals. For this purpose, the cross-section should be visualized in shading using some distinctive visual attributes (specific color, hatching).\nSolving this task geometrically might be a heavy work with large complicated CAD models. If visualization of the cross-section is the only goal, this task can be solved efficiently using OpenGL-based capping algorithm.\nA gif showing sample results of my capping algorithm:\n","date":1509235200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1509235200,"objectID":"0c1835431441eefbeab6fb07f361ab35","permalink":"https://complexwang.github,io/project/visualization/","publishdate":"2017-10-29T00:00:00Z","relpermalink":"/project/visualization/","section":"project","summary":"Clipping visualized 3D models with user-defined clipping planes is one of basic OpenGL features that allows the user to look inside the models.","tags":["OpenGL"],"title":"Visualization of the model cross-section using OpenGL","type":"project"},{"authors":null,"categories":null,"content":"I will write later\u0026hellip;\n","date":1490400000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1490400000,"objectID":"65c3326436b8564f09d5e75d8045c509","permalink":"https://complexwang.github,io/project/remesh/","publishdate":"2017-03-25T00:00:00Z","relpermalink":"/project/remesh/","section":"project","summary":"Given a mesh and computer another mesh that satisfy some quality requirements and approximate well the input mesh.","tags":["Mesh Optimization"],"title":"Isotropic 3D Model Remeshing Algorithm","type":"project"},{"authors":null,"categories":null,"content":" This is a video I recorded of my hollowing algorithm.\nThe pricing for most 3D printing materials is volume-based: the less material you use, the less it will cost you. For some materials, hollowing your object will also avoid deformation or discoloration.\nIn 3D printing, wall thickness refers to the distance between one surface of your model and its opposite sheer surface. Wall thickness is defined as the minimum thickness your model should have at any time. It’s important that every surface of your 3D model has been assigned a wall thickness.\nWhen using your 3D modeling software it\u0026rsquo;s possible to design a surface without a wall thickness. However, 3D printers need the information about how thick you intend the wall of your object to be. Many printing problems can be traced back to wall thickness issues. The minimum printable wall thickness primarily depends on the material you choose. Other factors such as the alignment, size, and overall design of your 3D model, can also influence the recommended minimum wall thickness.\nPushing the wall thickness to the minimum might seem like a way to save money. However, making walls too thin can make a model too fragile and might cause parts of it to break off.\nThe image above shows sample result of my hollowing algorithm.\n","date":1477699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1477699200,"objectID":"30d3dfb5c5ae7efcda9c03cb4ecfb848","permalink":"https://complexwang.github,io/project/hollow/","publishdate":"2016-10-29T00:00:00Z","relpermalink":"/project/hollow/","section":"project","summary":"When you 3D printing something and you want to save material,the first way comes to your mind is hollowing your model.","tags":["Mesh Offset"],"title":"Fast Intersection-free 3D Model Hollowing Algorithm","type":"project"}]